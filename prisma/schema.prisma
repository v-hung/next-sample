// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])

  @@map("verificati_on_requests")
}

model Admin {
  id       String @id @default(cuid())
  email    String @unique
  password String
  name     String

  imageId String?
  image   File?   @relation("avatar", fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  files File[] @relation("files")

  folders FolderFile[] @relation("folders")

  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  histories AdminHistory[]

  publish   String   @default("publish") // or draft
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Role {
  id   String @id @default(cuid())
  name String

  admins Admin[]

  permissions PermissionsOnRoles[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roles")
}

model Permission {
  key       String // 'browse' | 'create' | 'edit' | 'delete' | 'file' 
  tableName String

  roles PermissionsOnRoles[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // id        String @id @default(cuid())
  @@id([key, tableName])
  @@map("permissions")
}

model PermissionsOnRoles {
  roleId              String
  permissionKey       String
  permissionTableName String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission Permission @relation(fields: [permissionKey, permissionTableName], references: [key, tableName], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([roleId, permissionKey, permissionTableName])
  @@map("permissions_on_roles")
}

model FolderFile {
  id        String @id @default(cuid())
  name      String
  tableName String

  adminId String
  admin   Admin  @relation("folders", fields: [adminId], references: [id])

  parentId String?
  parent   FolderFile?  @relation("children", fields: [parentId], references: [id])
  children FolderFile[] @relation("children")

  files File[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("folder_files")
}

model File {
  id            String  @id @default(cuid())
  name          String
  mime          String
  caption       String?
  url           String
  width         Int?
  height        Int?
  naturalHeight Int?
  naturalWidth  Int?
  size          Float
  tableName     String

  adminId String
  admin   Admin  @relation("files", fields: [adminId], references: [id])

  folderFileId String?
  folderFile   FolderFile? @relation(fields: [folderFileId], references: [id])

  admins Admin[] @relation("avatar")

  quesstion_groups QuestionGroup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("files")
}

model SettingGroup {
  id        String  @id @default(uuid())
  name      String
  label     String?
  sort      Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  settings Setting[]

  @@map("setting_groups")
}

model Setting {
  id        String  @id @default(uuid())
  name      String  @unique
  label     String?
  type      String
  details   String?
  value     String? @db.Text
  col       Int?
  sort      Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groupId String
  group   SettingGroup @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("settings")
}

model AdminHistory {
  id        Int     @id @default(autoincrement())
  status    String  // 'succcess' | 'error'
  action    String  // 'create' | 'edit' | 'delete' | 'upload' | 'login'
  title     String
  tableName String?
  data      String? @db.Text

  adminId String
  admin Admin @relation(fields: [adminId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin_histories")
}

model AccessHistory {
  id     String  @id @default(cuid())
  device String
  url    String @default("/")
  ip     String?

  accessTime  DateTime @default(now())
  timeToLeave DateTime @default(now())

  @@map("access_histories")
}

// *
// CUSTOM
// *
model Quiz {
  id       String   @id @default(cuid())
  title    String
  slug     String
  workTime Int // so phut

  passages Passage[]

  publish   String   @default("publish") // or draft
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quizs")
}

model Passage {
  id      String @id @default(cuid())
  title   String
  content String

  quizId  String
  quiz    Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  questionGroups QuestionGroup[]

  @@map("passages")
}

model QuestionGroup {
  id      String @id @default(cuid())
  type    String
  title   String
  options String

  imageId String?
  image    File? @relation(fields: [imageId], references: [id])

  passageId String
  passage    Passage @relation(fields: [passageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  questions Question[]

  @@map("question_groups")
}

model Question {
  id String @id @default(cuid())

  questionName String?
  optionA      String?
  optionB      String?
  optionC      String?
  optionD      String?

  groupQuestionId String
  questionGroup   QuestionGroup @relation(fields: [groupQuestionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  answer Answer?

  @@map("questions")
}

model Answer {
  id         String @id @default(cuid())
  answerName String

  questionId String    @unique
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("answers")
}